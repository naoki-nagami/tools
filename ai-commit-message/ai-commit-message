#!/bin/bash -eu

usage() {
  echo "Usage: ai-commit-message [OPTIONS]"
  echo ""
  echo "Generate git commit message from staged diff using GhatGPT."
  echo ""
  echo "Options:"
  echo "  -k,--api-key API_KEY    OpenAI API key (default: \$OPENAI_API_KEY environment variable)"
  echo "  -l,--lang LANG          Language for output (default: \$LANG environment variable else en-US)"
  echo "  -b,--body-lines NUMBER  Number of bullet points in message body (default: 0)"
  echo "  -n,--non-interactive    No interactive confirmation"
  echo "  -h,--help               Show this help message"
  echo ""
  echo "Use this command in combination with git commit command. (Recommended)"
  echo "Set git alias in your .gitconfig file."
  echo ""
  echo "Examples:"
  echo "[alias]"
  echo "  ac = ! git commit -m \\\"\$(ai-commit-message)\\\"                # basic using"
  echo "  ace = ! git commit -e -m \\\"\$(ai-commit-message)\\\"            # generate and edit"
  echo "  acjp = ! git commit -m \\\"\$(ai-commit-message -l japanese)\\\"  # generate in Japanese"
}

# require curl, jq
if ! command -v curl >/dev/null; then
  echo "curl command is required. please install curl." >&2
  exit 1
fi
if ! command -v jq >/dev/null; then
  echo "jq command is required. please install jq." >&2
  exit 1
fi

# set options
OPTION_LANG=""
OPTION_BODY_LINES=""
OPTION_INTERACTIVE=""
while [ $# -gt 0 ]; do
  case "$1" in
    -k|--api-key)
      OPENAI_API_KEY=$2
      shift 2;
      ;;
    -l|--lang)
      OPTION_LANG=$2
      shift 2
      ;;
    -b|--body-lines)
      OPTION_BODY_LINES=$2
      shift 2
      ;;
    -n|--non-interactive)
      OPTION_INTERACTIVE='none'
      shift 1
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

if [ -z "$OPENAI_API_KEY" ]; then
  echo "OpenAI API key is required. Please set OPENAI_API_KEY environment variable or use -k option." >&2
  exit 1
fi

PROMPT_LANG="output must be in lang: ${OPTION_LANG:-${LANG:-en-US}}"

PROMPT_BODY=""
if [ ! -z "$OPTION_BODY_LINES" ]; then
  PROMPT_BODY="add description, in under ${OPTION_BODY_LINES} bullet points, open empty line before description."
fi

# get diff
if ! git status >/dev/null ; then
  exit 1
fi

GIT_DIFF=$(git diff --staged)
if [ -z "$GIT_DIFF" ]; then
  echo "No changes to commit. git add some changes and try again."
  exit 1
fi

# query gpt
query_gpt() {
  # prompt for ai
  PROMPT=$(cat <<EOL
generate git commit message from below diff. focus on changes, summarize changes with appropriate length, in one sentence,
must follow format: <type>: <subject>
  type const: feat, fix, docs, style, refactor, test, chore
${PROMPT_LANG}
${PROMPT_BODY}
--
${GIT_DIFF}
--
EOL
)

  QUERY=$(jq -n --arg content "$PROMPT" '{"role": "user", "content": $content}')

  # generate commit message
  # remove quotes
  ANSWER=$(curl https://api.openai.com/v1/chat/completions -s \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${OPENAI_API_KEY}" \
    -d "{\"model\": \"gpt-3.5-turbo\", 
         \"temperature\": 1.0,
         \"max_tokens\": 1000,
         \"messages\": [${QUERY}]}")

  if [ -z "$ANSWER" ]; then
    echo "Failed to generate commit message. Please try again." >&2
    exit 1
  fi

  if [ "$(echo "$ANSWER" | jq -e 'has("error")')" = "true" ]; then
    echo "$ANSWER" | jq -r '.error.message' >&2
    exit 1
  fi

  echo "$ANSWER" | jq -r '.choices[0].message.content'
}

MESSAGE=$(query_gpt)

if [ ! -z "$OPTION_INTERACTIVE" ]; then
  echo "$MESSAGE"
  exit 0
fi

echo "$MESSAGE" >&2
while true; do
  read -p "OK ? [y/n/q]: " CONFIRM
  case "$CONFIRM" in
    n)
      MESSAGE=$(query_gpt)
      echo "$MESSAGE" >&2
      ;;
    q)
      exit 0
      ;;
    *)
      echo "$MESSAGE"
      break
      ;;
  esac
done
